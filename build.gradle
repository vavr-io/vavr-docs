buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            name = 'ajoberstar-backup'
            url = 'https://ajoberstar.org/bintray-backup/'
        }
    }
    dependencies {
        classpath "org.asciidoctor:asciidoctor-maven-plugin:${project.asciiDoctorMavenPluginVersion}"
        classpath "org.asciidoctor:asciidoctorj-pdf:${project.asciiDoctorJPdfVersion}"
        classpath "org.ajoberstar:gradle-git:${project.gradleGitVersion}"
        classpath "org.kordamp.gradle:livereload-gradle-plugin:${project.livereloadGradlePluginVersion}"
        classpath "org.asciidoctor:asciidoctor-gradle-jvm:${project.asciidoctorGradleJvm}"
        classpath "org.asciidoctor:asciidoctor-gradle-base:${project.asciidoctorGradleBase}"
    }
}

apply plugin: 'org.asciidoctor.jvm.convert'
apply plugin: 'org.ajoberstar.github-pages'
apply plugin: 'org.kordamp.gradle.livereload'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.asciidoctor.base'

repositories {
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
    maven { url 'https://jitpack.io' }
}

dependencies {
    testImplementation "io.vavr:vavr:${project.version}"
    testImplementation "junit:junit:4.11"
    testImplementation "org.assertj:assertj-core:3.0.0"
    testImplementation "ch.qos.logback:logback-classic:0.9.26"
    testImplementation "org.mockito:mockito-core:1.10.19"
}

compileJava {
    sourceCompatibility = 11
    targetCompatibility = 11
}

idea {
    project {
        jdkName = 11
        languageLevel = 11
    }
}

asciidoctor {
    sourceDir = file('src/docs/asciidoc/en')
    outputDir = file("$buildDir/docs/asciidoc")

    options backend: 'html5'

    baseDirFollowsSourceDir()

    attributes(
            'project-version': project.version
    )

    sources {
        include 'index.adoc'
    }

    resources {
        from(sourceDir) {
            include 'images/**'
        }
    }
}

tasks.withType(Copy).configureEach {
    eachFile { println it.file }
}

tasks.register('copyCNAME', Copy) {
    from 'CNAME'
    into file(asciidoctor.outputDir.path)
}

//asciidoctor.dependsOn test
copyCNAME.dependsOn asciidoctor
publishGhPages.dependsOn copyCNAME

githubPages {
    repoUri = 'https://github.com/vavr-io/vavr-docs.git'

    credentials {
        username = System.getenv('GITHUB_USER') ?: ''
        password = System.getenv('GITHUB_TOKEN') ?: ''
    }

    pages {
        from file(asciidoctor.outputDir.path)
        // into project.version
    }
}

liveReload {
    docRoot asciidoctor.outputDir.canonicalPath
}

tasks.register('watchAsciidoc') {
    doLast {
        tasks.asciidoctor.execute()
    }
}

tasks.register('watch') {
    doLast {
        fileTree('src/docs/asciidoc').visit { fileDetails ->
            if (fileDetails.file.isFile()) {
                println "Watching file: ${fileDetails.file}"
            }
        }
        tasks.watchAsciidoc.execute()
    }
}
