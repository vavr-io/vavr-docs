buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.asciidoctor:asciidoctor-maven-plugin:${project.asciiDoctorMavenPluginVersion}"
        classpath "org.asciidoctor:asciidoctorj-pdf:${project.asciiDoctorJPdfVersion}"
        classpath "org.ajoberstar:gradle-git:${project.gradleGitVersion}"
        classpath "org.kordamp.gradle:livereload-gradle-plugin:${project.livereloadGradlePluginVersion}"
        classpath "org.asciidoctor:asciidoctor-gradle-jvm:${project.asciidoctorGradleJvm}"
        classpath "org.asciidoctor:asciidoctor-gradle-base:${project.asciidoctorGradleBase}"
    }
}

apply plugin: 'org.asciidoctor.jvm.convert'
apply plugin: 'org.ajoberstar.github-pages'
apply plugin: 'org.kordamp.gradle.livereload'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.asciidoctor.base'

repositories {
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

dependencies {
    testCompile "io.vavr:vavr:${project.version}"
    testCompile "junit:junit:4.11"
    testCompile "org.assertj:assertj-core:3.0.0"
    testCompile "ch.qos.logback:logback-classic:0.9.26"
    testCompile "org.mockito:mockito-core:1.10.19"
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

idea {
    project {
        jdkName = 1.8
        languageLevel = 1.8
    }
}

asciidoctor {
    sourceDir = file('src/docs/asciidoc')
    outputDir = file("$buildDir/docs/asciidoc")

    baseDirFollowsSourceDir()

    sources {
        include 'index.adoc'
    }
    outputOptions {
        backends = ['html5']
    }
    resources {
        from(sourceDir) {
            include 'images/**'
        }
    }
}

tasks.withType(Copy).configureEach {
    eachFile { println it.file }
}

tasks.register('copyCNAME', Copy) {
    from 'CNAME'
    into file(asciidoctor.outputDir.path + '/html5')
}

//asciidoctor.dependsOn test
copyCNAME.dependsOn asciidoctor
publishGhPages.dependsOn copyCNAME

githubPages {
    repoUri = 'https://github.com/vavr-io/vavr-docs.git'

    credentials {
        username = project.githubUser
        password = project.githubPassword
    }

    pages {
        from file(asciidoctor.outputDir.path + '/html5')
        // into project.version
    }
}

liveReload {
    docRoot asciidoctor.outputDir.canonicalPath
}

tasks.register('watchAsciidoc') {
    doLast {
        tasks.asciidoctor.execute()
    }
}

tasks.register('watch') {
    doLast {
        fileTree('src/docs/asciidoc').visit { fileDetails ->
            if (fileDetails.file.isFile()) {
                println "Watching file: ${fileDetails.file}"
            }
        }
        tasks.watchAsciidoc.execute()
    }
}
